type ZuniswapV2Factory @entity {

    id: ID!

    pairCount: Int!

    txCount: BigInt!
}

type Token @entity {
    id: ID!

    symbol: String!
    name: String!
    decimals: BigInt!

    totalSupply: BigInt!

    tradeVolume: BigDecimal!

    # transaction acroess all pairs
    txCount: BigInt!

    # Liquidity across all pairs
    totalLiquidity: BigDecimal

    tokenDayData: [ZuniswapV2TokenDayData!]! @derivedFrom(field: "token")
    pairDayDataBase: [ZuniswapV2PairDayData!]! @derivedFrom(field: "token0")
    pairDayDataQuote: [ZuniswapV2PairDayData!]! @derivedFrom(field: "token1")
    pairBase: [ZuniswapV2Pair!]! @derivedFrom(field: "token0")
    pairQuote: [ZuniswapV2Pair!]! @derivedFrom(field: "token1")

}
type ZuniswapV2Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  pairHourData: [ZuniswapV2PairHourData!]! @derivedFrom(field: "pair")
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type ZuniswapV2User @entity {
  id: ID!
  usdSwapped: BigDecimal!
}

type ZuniswapV2Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [Mint!]!
  burns: [Burn!]!
  swaps: [Swap!]!
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: ZuniswapV2Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: ZuniswapV2Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: ZuniswapV2Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: ZuniswapV2Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt

  # mark uncomplete in ETH case
  needsComplete: Boolean!
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: ZuniswapV2Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: ZuniswapV2Pair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}

# Data accumulated and condensed into day stats for all of Uniswap
type ZuniswapV2DayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  txCount: BigInt!
}

type ZuniswapV2PairHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: ZuniswapV2Pair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type ZuniswapV2PairDayData @entity {
  id: ID!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyTxns: BigInt!
}

type ZuniswapV2TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
}
